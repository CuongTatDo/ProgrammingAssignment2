# The following codes are written in order to meet the requirements from
# Associate Professor Roger D Peng at BloomBerg School of Public Health at 
# John Hopkins University;
# it is also a requirement from Coursera for completing the short training course.

# According to requirements, I need to creat two functions: makeCacheMatrix
# and cacheSolve. Where:
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse
# and cacheSolve: This function computes the inverse of the special "matrix" returned 
# by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has 
# not changed), then cacheSolve should retrieve the inverse from the cache.
# makeCacheMatrix creates a list containing a function to

makeCacheMatrix <- function(x = matrix()) {
  InvertMatrix <- NULL # this is where the outcome of inversion is collected
  set <- function(y) {
    x <<- y
    InvertMatrix <<- NULL # inv will be initialized to
  }
  get <- function() x
  setInv <- function(inverse) InvertMatrix <<- inverse
  getInv <- function() InvertMatrix
  list(set=set, get=get, setInv=setInv, getInv=getInv)
}


# The following function returns the inverse of the matrix. 
cacheSolve <- function(x, ...) {
  outcome <- x$getInv()
  if(!is.null(outcome)) {
    message("Transfering cached data.")
    return(outcome)
  }
  data <- x$get()
  outcome <- solve(data,...)
  x$setInv(outcome)
  outcome
}
